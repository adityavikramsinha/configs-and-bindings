ls | where size > 10mb 
ls  
$env.config.color_config | sort 
$nu.congih
$nu.config
$nu.config-path
cd "C:\Users\Aditya\AppData"
cd C:\Users\Aditya\AppData
$nu.config-path
cd $nu.config-path
cd C:\Users\Aditya\AppData
explorer
explorer . 
cd C:\Users\Aditya\AppData\Roaming\nushell\config.nu
cd C:\Users\Aditya\AppData\Roaming\nushell\
explorer . 
code . 
cls 
clear 
ls | where size > 10kb 
ls | describe
ls 
cls 
clear 
cls 
clear 
cls 
clear 
ls 
clear 
cls 
ls 
ls | where size < 10kb 
code . 
clear 
ls 
grep 
agentactivationruntimestarter.exe 
clear 
ls 
cd "Application Data" 
ls 
cd Searches 
ls 
ls | where size <= 10kb 
ls | where size <= 1.3kb 
ls | where size < 1.3kb 
ls 
cd .. 
ls 
cat txt.txt 
cal txt.txt 
cls cd 
cla ls 
cls ls 
ls 
cd AppData\
ls 
cd Local\ 
ls 
clear 
ls 
cd 
pwd 
ls 
get-alias 
alias 
show-alias 
ls *.javba 
ls *.java
all 
ls *.md 
ls 
ls *.txt
ls 
$env.profile
help 
help -h 
config nu 
$nu.config-path | code . 
$nu.config-path
$nu.config-path | cd  
ls 
$nu.config-path 
cd C:\Users\Aditya\AppData\Roaming\nushell\config.nu
cd "C:\Users\Aditya\AppData\Roaming\nushell\config.nu" 
cd C:\Users\Aditya\AppData\Roaming\nushell 
la 
ls 
code . 
str mycommand 
str 
str mycommand 
str mycomand 
str mycommand
ls 
$nu 
open  C:\Users\Aditya\AppData\Roaming\nushell\config.nu | find def 
cargo run 
winget 
winget install carg o
winget install cargo
rustup 
winget install rustup 
rustup --version 
rustup 
rustup -v 
rustup install stable 
cd 
ls 
rm .cargo 
rmdir -recursive .cargo 
remove 
rm 
rm .cargo 
rm --recursive .cargo 
ls 
clar 
clear 
rustup install stable  
rustup 
winget install rustup 
cls 
rustup install stable 
rustup -v 
winget install rustup 
winget uninstall rustup 
winget install rustup 
winget uninstall rustup 
cls 
rustup -v 
https get gh repo clone rust-lang/rustup
http get gh repo clone rust-lang/rustup
http get https://github.com/rust-lang/rustup.git
cclear 
gh version 
cargo run 
rustup 
rustup --version 
rustup 
rustup stable intall 
rustup stable install 
cargo 
ls 
cd Downloads 
ls 
cd zed 
ls 
cd zed-main 
ls 
cargo run 
cd 
cd Downloads/zed/zed-main
ls 
cargo run --release
rustup toolchain install 1.85-x86_64-pc-windows-msvc
cargo run --release
cargo build 
rustup toolchain install 1.85-x86_64-pc-windows-msvc
cargo build 
rustup toolchain install 1.85-x86_64-pc-windows-msvc
cargo run --release \
cargo run --release 
cd Downloads/zed/zed-main 
ls 
cargo run --release  
cmake --version 
cd Downloads/zed/zed-main 
cargo run --release  
cls 
storage
stor
cls 
cd 
cls 
cargo build 
cargo run 
cargo run  "C:\Users\Aditya\Downloads\rex_code.rex"
cargo run  "C:/Users/Aditya/Downloads/rex_code.rex"
target\debug\rex.rex 
./target\debug\rex.rex 
./target/debug/rex.rex
ls 
cd target 
ls 
cd debug 
ls 
rex.rex
./rex.rex
./rex.exes 
./rex.exe
./rex.exe "C:\Users\Aditya\Downloads\rex_code(1).rex"
./rex.exe 
./rex.exe run 
./rex.exe run "C:\Users\Aditya\Downloads\rex_code (1).rex"
./rex.exe run "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex"
./rex.exe run "C:/Users/Aditya/Downloads/rex_code (1).rex"
cd .. 
.
.. 
ls 
... 
.. 
cd .. 
ls 
code . 
cd ~\Downloads\zed\zed-main
cargo build 
cargo build 
cargi run
cargo run 
code . 
cd .. 
rm --recursive rex-master
cls 
cd "Desktop/Rust/"
cd rex-feat-type-inference\
ls 
cargo run 
./target/debug/rex.exe "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex"
./target/debug/rex.exe run "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex"
./target/debug/rex.exe run 
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex"
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" RUST_BACKTRACE=1
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" 
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" RUST_BACKTRACE=1
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" 
code "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex"
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" 
code . 
cargo build 
cargo run 
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" 
cd Desktop/Rust/rex-feat-type-inference/
./target/debug/rex.exe run --input "C:\\Users\\Aditya\\Downloads\\rex_code (1).rex" 
cd .. 
git init 
winget git 
winget install git 
winget install Git.Git 
git 
git --version 
git 
git --version 
./git 
dotnet
date
get 
date now 
winget uninstall git
git 
git
cd ~ 
ls 
cd Desktop\Rust\rex-feat-type-inference\
ls 
git init 
git remote add origin https://github.com/adityavikramsinha/rex.git
git -b 
git -b feat/type-inference
git checkout feat/type-inference
git add . 
git checkout feat/type-inference
git checkout master
git push origin master 
git commit -m "added regex utils for rex " 
git push origin feat/type-inferences
git push origin 
git remote - 
git remote -v
git push origin master
git push origin feat/type-inferences
git push origin feat/type-inference
git add . 
git commit -m "initial commit "
git checkout feat/type-inference
git branch -r
git branch -a
cd .. 
ls 
git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
git clone https://github.com/adityavikramsinha/rex.git
ls 
cd rex 
ls 
git init 
code . 
ls 
git checkout feat/type-inference
ls 
code . 
clear 
git branch -a
git add . 
git commit -m "initial commit, added regex utils for rex w/o unit-tests" 
git push origin feat/type-inference
cls 
ls 
cd rex-engine
ls 
cd src
ls 
cargo run eval.rs
cargo build eval.rs
cargo build 
cargo run 
rustc eval.rs
cargo build 
cargo run eval.rs
cargo run 
cargo test 
git add . 
git commit -m "added regex utils unit test" 
git push origin feat/type-inference
cd .. 
ls
cd rex-engien 
cd rex-engine 
ls 
cargo run 
cargo build 
git restore
./adb
./adb connect
./adb devices
./adb kill-server
./adb devices
kill
./adb kill 5554
./adb kill-server
./adb start-server
./adb devices
./adb install "C:\Users\Aditya\Downloads\Royal Revolt 2_ Tower Defense_10.5.0_APKPure.apk"
./adb install C:\Users\Aditya\Downloads\Royal Revolt 2_ Tower Defense_10.5.0_APKPure.apk
./adb install "C:\Users\Aditya\Downloads\apkrrtrn.apk"
./adb install C:\Users\Aditya\Downloads\apkrrtrn.apk
./adb devices
./adb kill-server
./adb start-server
./adb devices
./adb install C:\Users\Aditya\Downloads\apkrrtrn.apk
./adb devices
./adb install C:\Users\Aditya\Downloads\apkrrtrn.apk
./adb devices
./adb install C:\Users\Aditya\Downloads\apkrrtrn.apk
cd ~
cd C:\Users\Aditya\
cd Desktop\Rust\rex-feat-type-inference\
cd Desktop\Rust\rex\
cargo fmt
git revert 6f77505
git stash
git revert 6f77505
git stash . 
git stash
git revert 6f77505
git stash 
git revert 6f77505
cargo fmt
cargo test 
ls rex-engine\ 
cargo test 
cargo fmt 
cargo test 
git add . 
git commit -m "implemented better error handling for regex utility" 
git push origin feat/type-inference
cd Desktop\Rust\rex\
ls 
code . 
ls 
cd rex-engine 
cargo test 
\git add . 
git add . 
cargo fmt
cd .. 
ls 
cd .. 
ls 
rmdir autocomplete _impl
mkdir sandbox
ls 
ls sandbox\
cd sandbox\
ls
cargo new 
cd .. 
rm --recursive sandbox 
cargo new sandbox
cd sandbox 
ls 
cd src
ls 
cd // 
cd ~ 
cd Desktop\Rust\rex\
ls 
cd rex-engine\
cargo test
python
pip --version
py
winget 
winget install pip
pip
pip --version 
cls 
python 
python --version
py --version
py where
py --where 
py -h 
cd Desktop\Rust\
cd rex 
cd rex-engine\
cargo test
cd rex-engine\
cargo test
clos 
cls 
clear 
ls 
cd .. 
l;s 
ls 
mkdir rex-wrappers
cd rex-wrappers\
mkdir src 
ls 
cd Desktop\Rust\rex\rex-engine\
cargo test 
cd Desktop\Rust\rex\rex-engine\
ls 
cargo test
git add . 
git commit -m "implemented optimised regex engine functions, + added Regex type, + introduced some changes to the folder structure that makes sense for 'wrapper's around types" 
git push origin feat/type-inference
git pull origin feat/type-inference
git stash
git pull origin feat/type-inference
ls 
cd .. 
ls 
git commit 
git push origin feat/type-inference
git pull origin feat/type-inference
git commit -m "merging upstream fork-> local fork"
git merge 
git push origin feat/type-inference
cd rex-engine
cargo test
git log 
git reset --hard 1d0e30b3b4b1acdc9c680bb60cd1f6816ca893b2
git push origin feat/type-inference
git fetch
git push origin feat/type-inference
git reset --hard 1d0e30b3b4b1acdc9c680bb60cd1f6816ca893b2
git push origin feat/type-inference --force
git reset --hard 1d0e30b3b4b1acdc9c680bb60cd1f6816ca893b2
cargo test
git log 
git reset --hard 1d0e30b3b4b1acdc9c680bb60cd1f6816ca893b2
cargo test
git add . 
git commit -m "previous Regex implementation missed passing some tests, this is enhanced and passes all basic tests."
git add . 
git commit -m "previous Regex implementation missed passing some tests, this is enhanced and passes all basic tests."
cd .. 
git add . 
git commit -m "previous Regex implementation missed passing some tests, this is enhanced and passes all basic tests."
git push origin feat/type-inference 
cd rex-engine 
cargo test
cd Desktop\Rust\rex\rex-engine\
cargo test
git add . 
git commit -m "added error checking for Regex type" 
git push origin feat/type-inference 
git add . 
git commit -m "documented WrapperRegex" 
cd .. 
git add . 
git commit -m "documented WrapperRegex" 
git push origin feat/type-inference 
cd rex-engine 
cargo test
git fetch origin
git checkout feat/type-inference
cd .. 
cargo fmt
git add . 
git commit -m "formatted codebase using cargo fmt" 
git push origin feat/type-inference 
git add . 
git commit -m "tidy-ing up" 
git push origin feat/type-inference 
git add .  
git commit -m "sync-d upstream with fork" 
git push origin feat/type-inference 
git fetch origin
git push origin feat/type-inference 
git pull origin feat/type-inference
git add . 
git commit -m "resolving merge conflicts with HEAD" 
git push origin feat/type-inference 
ls 
cd rex-engine 
cargo test
cd .. 
cargo fmt
cargo test
cd rex-engine\
cargo test
cls 
clear 
cargo test
cargo test &> test.log
cargo test *> test.log
cargo --help
cargo test | save test_combined.log --raw
cargo test test_let_add_in_add | save test_combined.log --raw
cargo test test_let_add_in_add | save -f test_combined.log --raw
clear 
cd C:\Users\Aditya\Desktop\Rust
ls 
cd dsa 
s 
ls 
mk csesprobs
ls 
cd .. 
ls 
cd dsa 
open Cargo.toml 
save Cargo.toml
[package] | save Cargo.toml
"[package]" | save Cargo.toml
ls 
mkdir datastructures
cd datastructures\
ls 
cargo new datstructures --lib 
cargo new --lib 
ls 
cd .. 
ls 
cd 
cd Desktop\Rust\dsa \
cd Desktop\Rust\dsa  
ls 
cd datastructures\
ls 
cargo new 
cargo new datstructures
cd Desktop\Rust\dsa  
cargp new 
cargo new 
cargo new datstructures --lib
ls 
r,dor datastructures
rmdir datastructures
rm -r -f  datastructures
ls
ls 
cargo new datstructures --lib
ls 
cargo new datstructures --lib
ls 
cd datstructures\
ls 
get Cargo.toml
read Cargo.toml
open Cargo.toml 
ls
ls 
cd ../..
ls
git init 
ls 
cd datstructures\
ls
cd .. 
mkdir tests 
ls 
cd tests 
save "tests" | unit_tests.rs
"tests" | unit_tests.rs
"tests" | save unit_tests.rs
cd .. 
cargo test
ls
rm -f -r .git
ls 
rm .gitignore
cd .. 
git init 
ls
cd datstructures\
clear 
cd C:\Users\Aditya\Desktop\Rust
ls 
rm -r -f dsa 
ls 
clear 
cd 
ls
;s 
ls 
cd algorithms
cd datstructures\src\ 
cd datstructures\
ls 
cd src 
ls 
cd datstructures\ 
cd Desktop\Java  
ls 
cd algorithms 
ls
ls 
cd datstructures\  
ls 
cd datastructures 
ls 
cd trie
ls 
cd .. 
cd ..
ls
ls 
cd algorithms  
ls 
open .gitignore
git add . 
git commit -m "added trie implement + unit tests, next do documentation" 
cd Desktop\Rust\cp\io
cd Desktop\Rust\cp 
ls
ls 
cd .. 
ls 
cargo build 
clear 
cd .. 
ls 
cd .. 
ls 
wsl
wsl 
wsl.exe --list 
wsl.exe --list --online
wsl.exe --install kali-linux
curl -fsSO https://elixir-lang.org/install.sh
sh install.sh elixir@1.18.3 otp@27.2.3
installs_dir=$HOME/.elixir-install/installs
export PATH=$installs_dir/otp/27.2.3/bin:$PATH
export PATH=$installs_dir/elixir/1.18.3-otp-27/bin:$PATH
curl.exe -fsSO https://elixir-lang.org/install.bat
.\install.bat elixir@1.18.3 otp@27.2.3
curl.exe -fsSO https://elixir-lang.org/
curl.exe -fsSO https://elixir-lang.org/install.bat
iex
clear 
mix 
pwd 
cd Desktop\Erlang
mk Desktop\Erlang
cd Desktop 
mk 
hlep 
help 
help commands 
mkdir Elixr
ls 
cd Elixr
ls 
mix new helloplug
ls 
cd helloplug 
ls 
code . 
mix deps.get
iex -S mix
mix deps.clean decimal
mix deps.get
mix compile
mix deps.clean decimal
mix deps.get
mix deps.clean decimal
mix deps.get
mix 
mix deps.clean 
mix deps.get
mix compile
./helloplug
iex
iex -S mix
mix compile
mix deps.get
iex -S mix
mix deps.get
mix compile 
iex -S mix
mix deps.get
mix compile 
mix run 
mix run --no-hald
mix run --no-halt
mix help compile.app
mix deps.get
mix compile 
iex -S mix
mix compile 
iex -S mix
ls 
cd .. 
ls 
rmdir hellopliug
rmdir helloplug
rm -r -f helloplug
ls 
cd helloplug 
mix deps.get
mix compile 
iex -S mix
ls 
cd .. 
ls 
mix new ex_plug --sup
cd ex_plug 
ls 
code . 
cd .. 
ls 
rm -r -f helloplug
ls 
cd ex_plug 
ls 
mix deps.get
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
cd .. 
ls 
mkdir server 
ls 
cd server 
ls 
cd .. 
rm -r -f server 
ls 
mix new server --sup 
cd server && code. 
cd server and code . 
cd server; code . 
cd .. ; rm -r -f "ex_plug" 
ls 
cd Elixir 
ls 
cd Elixr
ls 
rm -r -f ex_plug
ls 
cd server 
ls 
mix deps.get
mix run --no-halt 
mix deps.clean 
mix deps.clean plugcowboy 
mix deps.clean plug)_cowboy 
mix deps.clean plug_cowboy 
mix deps.get 
mix run --no-halt 
ls 
cd Desktop/Elixr
ls 
cd server 
mix run --no-halt 
lsof -i :8080
netstat -a -n -o | find "8080"
ping 
ping 127.0.0.1
netstat aon | findstr "8080"
netstat -aon | findstr "8080"
netstat -aon | findstr 8080
netstart -aon
netstat -aon
netstat -aon | findstr :8080
findstr
netstat -aon 
netstat -aon | findstr 60483
iex -S mix 
mix run --no-halt 
clear 
mix run --no-halt 
mix compile; mix run --no-halt
mix clean --all 
ls 
rm mix.lock 
mix deps.get --force 
mix compile --force 
mix run --no-halt
elixir -v 
erlang -v 
elixir -v 
$env.PATH 
windir
mix compile --force 
mix run --no-halt
cd .. 
ls 
rm -f -r server 
mix new server --sup
cd server 
ls 
code . 
mix get.deps 
mix deps.get 
mix compile  
mix run --no-halt 
mix compile  
mix run --no-halt 
mix compile  
mix run --no-halt 
mix compile  
mix run --no-halt 
mix compile  
mix run --no-halt 
openssl
winget mkcert
winget install mkcert
mkcert
cd Desktop/Elixr/server
mkcert
ls 
mkdir private 
ls 
git init  
git add . 
git commit -m "initl commit, " 
cd private 
ls 
mkcert localhost
ls 
open localhost-key.pem
mix run --no-
mix run --no-halt
cd .. 
mix run --no-halt
mix compile 
mix run --no-halt
netstat -aon | findstr 8080
netstat -aon | findstr 4000
ls 
cd _build/dev/server 
ls 
cd _build 
cd dev
ls 
cd lib/server 
ls 
cd private 
ls 
rm localhost and localhost-key 
rm localhost.pem and localhost-key.pem 
rm localhost.pem 
rm localhost-key.pem 
ls 
mkcert localhost
ls
cd .. 
cd ..
cd .. 
cd ..
mix run --no-halt
iex 
mix run --no-halt
ls -l
cd _build/dev/lib/server/private 
ls 
rm localhost-key.key
rm localhost.cert
cd Desktop\Elixr\server
mix run --no-halt
mkcert localhost
mix run --no-halt
mix compile 
mix run --no-halt
mix compile 
mix run --no-halt
netstat -aon | findstr 4000
netstat -aon | findstr 8080
lsof 
pid
mix run --no-halt
pwd 
ls
cd lib 
mix run --no-halt
cd private 
ls 
pwd 
cd .. 
mix run --no-halt
mix get.deps 
mix deps.get
mix clean 
mix deps.get
mix clean -all
mix clean --all
mix deps.get
mix -h
mix --help
mix help clean
mix clean --deps 
mix deps.get
mix compile 
mix run --no-halt
cd private 
ls 
cd lib 
ls 
cd private 
rm localhost.cert
rm localhost-key.key
mkcert localhost 
rm localhost-key.key
mkcert -install
cd .. 
mix run --no-halt
mkcert dev
mix run --no-halt
winget install openssl
winget install -e --id ShiningLight.OpenSSL
openssl
cd Desktop\Elixr\server\lib
ls
ls 
cd .. 
mix run --no-halt
curl -I http://localhost
curl -I http://localhost:4000
curl -I --http2 https://localhost:4000
curl -I http://localhost:4000/
curl -I localhost:4000/
curl -I http://localhost:4000
curl -I localhost 
curl http://localhost:4000
erl -v 
which
which erl
which elixir
cd Desktop\Elixr\server\lib
ls 
mix run --no-halt
cd .. 
mix run --no-halt
elixir --version 
mix run --no-halt
curl -v https://localhost:443
curl --version
curl --update 
curl --help 
winget install libnghttp2
curl -sI https://curl.se -o/dev/null -w '%{http_version}\n'
curl --version 
curl -v --http2 https://localhost:443
winget uninstall curl 
winget update curl.curl
where curl
curl --version 
curl -v --http2 https://localhost:443
curl -v https://localhost:443 
curl -sI https://curl.se -o/dev/null -w '%{http_version}\n'
curl --versino 
curl --version
curl -sI https://curl.se -o/dev/null -w '%{https_version}\n'
is-http2 www.cloudflare.com
curl -v https://www.cloudflare.com
./configure --with-nghttp2=/usr/local
op./configure --with-nghttp2=/usr/local
opensll --version 
openssl -version  
openssl --version 
where openssl
winget install openssl
winget install -e --id ShiningLight.OpenSSL
winget install --id=ShiningLight.OpenSSL.Dev  -e
openssl 
cd Desktop\Elixr\server\lib
mix run --no-halt
cd 
cd Desktop\Elixr\server
mix run --no-halt
cd Desktop\Elixr\server 
git add . 
git commit -m "upgraded server to http/2"
git add . 
git commit -m "upgraded server to http/2"
mix run --no-halt
curl --http2-prior-knowledge -X POST -d "Chunk 1" http://localhost:8443/stream
curl -X POST -d "Chunk 1" https://localhost:4000/stream -k
curl -X POST -d "Chunk 1" https://localhost:8443/stream -k
curl -X POST -d "Chunk 1" https://localhost:8443/netwrk -k
cd Desktop\Elixr\server 
mix
cd Desktop\Elixr\server 
curl https://localhost:8443
curl https://localhost:8443 -k
curl -X POST -d "Chunk 1" https://localhost:8443/netwrk -k
curl  https://localhost:8443/netwrk -k
curl  https://localhost:8443/stream -k
mix run --no-halt
curl  https://localhost:8443/stream -k
mix run --no-halt
mix deps.get 
mix run --no-halt
cd .. 
ks 
ls 
cd Rusit 
cd Rust 
ls 
cargo new server 
ls 
rm -r -f autcomplete_impl 
rm -r -f rex 
cd Desktop\Rust 
ls 
rm -r -f autcomplete_impl 
ls 
rm -r -f cp 
cls 
ls 
cd server 
cargo run 
mkcert min
cargo run 
cargo build 
openssl 
cd C:/Program Files
cd "C:/Program Files"
cd Git 
;s 
ls 
cd bin 
ls 
cd .. 
cd usr 
cd bin 
ls 
findstr 
findstr zforce 
./openssl.exe 
openssl
cd Desktop\Rust 
ls 
cd server 
cargo build 
openssl 
cargo clean 
echo %OPENSSL_DIR%
cargo build 
opensll --version 
openssl --version 
cd Desktop\Rust 
cd server 
cargo clean 
cargo build 
cd Desktop\Rust\server 
ls 
rm min-ke.pem 
rm "min-ke.pem"
rm "min-key.pem"
rm min.pe
rm min.pem
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -sha256
ls 
vcpkg 
winget install vcpkg
cd .. 
cd .. s
cd ~ 
ls 
cd `C:/Program Files/` 
ls 
git clone https://github.com/microsoft/vcpkg.git
cd `C:/Program Files/` 
git clone https://github.com/microsoft/vcpkg.git
cd `C:/Program Files/` 
ls 
cd vcpkg 
.\bootstrap-vcpkg.bat
.\bootstrap-vcpkg.bat -disableMetric
.\bootstrap-vcpkg.bat -disableMetrics 
ls 
pwd 
vcpkg install openssl:x64-windows
openssl 
openssl --version 
cd ~ 
ls 
clear 
cd Desktop\Rust\server 
ls 
cargo build 
ls 
rm -r -f OpenSSL
cd "C:/Program Files" 
ls 
rm -r -f OpenSSl
openssl 
cd "C:/Program Files/vcpkg"
ls 
cd packages 
s 
ls 
cd openssl_x64-windows\ 
ls 
cd .. 
cd openssl_x64-windows\ 
cd packages\openssl_x64-windows\ 
pwd 
cd Desktop\Rust\server 
cargo build 
cd Desktop\Rust\server 
cargo build 
cargo run 
git init 
git pull origin https://github.com/Arnav-Jhajharia/netwrk-backend.git
git remote add origin https://github.com/Arnav-Jhajharia/netwrk-backend.git
git add . 
git add. 
git add . 
git commit -m "initialised http(s) server with self signed key & cert"
git push origin master
ls 
rm -r -f idea 
ls 
rm -r -f .idea 
ls 
cargi add . 
git add . 
git commit -m "cleaning up" 
git push origin master
mkdir dev/self-signed-ssl
mv 
mv key.pem dev/self-signed-sll 
ls 
mv cert.pem dev/self-signed-ssl 
ls 
git add . 
git commit -m "cleaning up working dir by ignoring dev artifacts " 
git push origin master
cargo run 
git add . 
git add / 
ls 
git add . 
git commit -m "added deps logs, for mirroring on other OS's" 
git push origin master
cargo run 
cd Desktop\Rust\server 
ls 
cd dev 
ls 
cd benchmarking 
ls 
./benchmarking1.ps1
.\benchmarking.ps1
powershell -File benchmarking1.ps1
ls 
curl --version 
cargo run 
curl --version 
curl --version
curl --version 
where curl 
cd "C:\Program Files"
cd "C:/Program Files"
cd curl-8.12.1\
ls 
make curl 
make 
cmake 
cd..cd 
cd .. 
cd vcpkg 
vcpkg install curl 
cd C:/Program Files
cd `C:/Program Files/` 
cd vcpkg 
ls 
vcpkg install curl 
curl --version ]
curl --version 
OPENSSL_DIR
windir 
curl --version 
get-alias curl 
alias curl 
help 
cd `C:/Program Files/vcpkg`
ls 
vcpkg remove curl 
cd ~ 
cd Desktop\Rust\server 
ls 
cargo run 
cd Desktop\Rust\server 
git add . 
git commit -m "streams api introduced to handle larger files bit more efficiently" 
git push origin master
cargo run 
git add / 
git add . 
git commit -m "added auth catching as string for further impl " 
git push origin master
cargo run 
git add . 
git commit -m "added logs support for monitoring server activity"
git push origin master
cargo run 
cargo clean 
cargo build 
cargo report future-incompatibilities --id 
cargo report future-incompatibilities 
cargo run 
git add . 
git add .
git commit -m "rolling file logs have been implemented"
cargo build 
cargo run 
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:\Users\Aditya\Downloads\userdata1.avro" http://localhost:8443/streams
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:/Users/Aditya/Downloads/userdata1.avro" http://localhost:8443/streams
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:/Users/Aditya/Downloads/userdata1.avro" https://localhost:8443/streams
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:/Users/Aditya/Downloads/userdata1.avro" https://localhost:8443/streams -k
cargo run 
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:/Users/Aditya/Downloads/userdata1.avro" https://localhost:8443/streams -k
cargo run 
git add . 
git commit -m "added avro reading from incoming stream, and prints it to console. Ideally what we will want is to create reader schema that only checks for a certain number of fields wihout deserialising everything (put it to top?), but I am honestly tired of doing everything myself. So, unless someone else decides to make a schema (w & r), I dont think I will be doing anything more for avro reading downstream & upstream."
git push origin master 
git add . 
git commit -m "cleaning up working dir by ignoring dev artifacts " 
git push origin master  
cargo run 
curl -X POST -H "Content-Type: application/avro-binary" --data-binary "C:/Users/Aditya/Downloads/userdata1.avro" https://localhost:8443/streams -k
cargo build 
cargo build
cargo run 
mk test.cat
notepad test.bat
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" --data-binary ""C:/Users/Aditya/Downloads/userdata1.avro"" "https://localhost:8443/streams" --insecure
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" "C:/Users/Aditya/Downloads/userdata1.avro" "https://localhost:8443/streams" --insecure
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" "C:/Users/Aditya/Downloads/userdata1.avro" "https://127.0.0.1:8443/"
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" "C:/Users/Aditya/Downloads/userdata1.avro" "https://127.0.0.1:8443/" --insecure 
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" "C:/Users/Aditya/Downloads/userdata1.avro" "https://127.0.0.1:8443/streams" --insecure 
curl GET "https://localhost:8443/" --insecure
curl GET -H "https://localhost:8443/" --insecure
curl GET "https://localhost:8443/" --insecure
curl -X GET "https://localhost:8443/" --insecure
curl -X POST -H "Authentication: adi" -H "Content-Type: application/avro-binary" --data-binary "@C:/Users/Aditya/Downloads/userdata1.avro" "https://127.0.0.1:8443/streams" --insecure
ls 
./test.bat
clear
./test.bat
lear 
clear 
./test.bat
lclear 
clear 
cd Desktop\Rust\server 
clear
./test.bat
cargo run
./test.bat
cargo run
./test.bat
cargo run
./test.bat
cargo run
./test.bat
cd Desktop\Rust\server 
git add . 
git commit -m "added tokio-rt for async tasks + lru cache for in-server in-memory cache hits/miss"
git push origin master 
cd Desktop\Rust\server 
cargo fmt 
cargo build --release 
ls 
cd Desktop\Rust\server 
./test.bat
cargo run 
cargo build 
cargo fmt 
cargo run 
cargo run 
cargo build 
cargo run 
git add . 
git commit 
git commit -m "added guards igs"
git push origin master 
git checkout tcpserver
git checkout -b 
git checkout -b tcp-server
git which 
git where 
git add . 
ls 
cd src 
ls 
git checkout -b tcp-server
cd .. 
ls 
rmdir .logs 
rm -r -f .logs 
git which 
rm -r -f target 
ls 
git checkout -b master 
ls 
git switch master
ls 
git switch tcp-server
ls 
rm -r -f src 
ls 
rm -r -f log4rs.yaml 
rm -r -f test.bat 
ls 
rm -r -f dev 
ls 
cargo build 
curl -X GET "http://127.0.0.1/8080"
cargo run 
clear 
ls 
cd Desktop\ 
cd Rust
cd server 
ls 
cargo run 
carog run
cargo run 
ping 127.0.0.1:8080
cargo run 
ls 
mkdir dev/self-signed-ssl
ls 
cd dev/self-signed-ssl
ls 
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname"
openssl 
cargo build 
openssl
cd Desktop/Rust/server 
ls 
cargo build 
carog run 
cargo build 
carog run 
cargo run 
cd Desktop/Rust/server 
cargo run 
cargo clean 
cargo run 
openssl 
cd v
cd vcpkg 
cd C:/Program Files
cd "C:/Program Files"
cd vcpkg 
ls 
cd packages 
ls 
cd openssl_x64-windows\ 
ls 
cd bin 
ls 
cd ~ 
pwd 
ls 
winget install -e --id ShiningLight.OpenSSL
winget install -e --id ShiningLight.OpenSSL.Dev
winget update -e --id ShiningLight.OpenSSL.Dev 
cd "C:/Program Files"
ls 
cd winget
where winget 
winget uninstall ShiningLight.OpenSSL.Dev
winget install -e --id ShiningLight.OpenSSL.Dev
openssl
cd Desktop/Rust/server 
ls 
cd dev/self-signed-ssl
rmdir key.pem 
rm key.pem 
rm cert.pem 
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname"
ls 
cd .. 
cargp run 
cargo run 
ls 
cargo fm t
cargo fmt 
carog build 
cargo build 
cargo run 
python --version 
cd Desktop/Rust/server 
cargo run 
cargo fmt 
cargo run 
cargo fmt 
cargo run 
cargo build 
ping 
ping 192.168.0.1
netstat -a 
ipconfig
ipsconfig
ipconfig
cargo build 
cargo run 
curl -v -X POST -H "Content-Type: application/json" -d '{"hi": "ok"}' https://127.0.0.1:8443/
curl -v POST -H "Content-Type: application/json" -d '{"hi": "ok"}' https://127.0.0.1:8443/ -k 
cargo run 
nvim --version 
neovim --version 
neovim 
nvim 
cd .config 
ls 
cd nvim 
ls
cd .. 
ls 
cd .. 
ls 
cd .config ls
cd .conig 
cd .config 
ls
ls 
git clone https://github.com/nvim-lua/kickstart.nvim.git "${env:LOCALAPPDATA}\nvim"
ls 
oh-my-posh 
which oh-my-posh 
$home 
home 
~ 
cd Aditya 
ls 
cd Aditya 
cd ~ 
HOME 
home 
pw d 
pwd 
cd .config 
ls 
cd $nu.home 
cd $nu.config-path 
$nu.config-path 
cd C:\Users\Aditya\AppData\Roaming\nushell
ls 
str mycommand 
cd ~ 
ls 
cd .config 
ls 
mkdir .poshconfigs 
rm -r -f .poshthemes 
ls 
rm -r -f .poshconfigs 
ls 
mkdir .poshthemesz 
rm -r -f .poshthemesz 
mkdir .poshthemes
ls 
cd .poshthemes
ls 
cd Rust 
cd Desktop 
ls
ls 
cd algorithms 
ls 
cd Desktop\Java\algorithms\
ls 
ls 
ls
clear 
ls 
clear 
ls 
config nu 
$nu.config-path 
notepad C:\Users\Aditya\AppData\Roaming\nushell\config.nu
$env 
$env.XDG_CONFIG_HOME 
$env.XDG_CONFIG_HOME = `~/.config` 
$env.XDG_CONFIG_HOME = ~/.config 
$env.XDG_CONFIG_HOME = /.config 
$env.XDG_CONFIG_HOME  
which nushell 
$env.XDG_CONFIG_HOME  
$env.XDG_CONFIG_DATA
$env.config-path 
$env.config  
$nu.config-path 
which nushel 
which openssl  
$nu  
notepad $nu.config-path 
cd Desktop\Java\algorithms\
ls 
notepad $nu.config-path 
clear 
vlear 
clear 
ls 
clear 
cd Desktop\Java\algorithms\
clear 
cd Desktop\Java\algorithms\
ls 
rmdir out 
rm -r -f out 
ls 
git add . 
git commit -m "weird"
ls 
cd Desktop\Java\algorithms\
ls 
cd src 
ls 
wher nu 
which nu 
which nushell  
which nu 
clear
clar  
clear 
cls 
ls
clear 
ls 
cd Desktop\Java\algorithms\
cls 
ls 
clear 
clar 
clear 
ls 
cd Desktop\Java\algorithms\
cls 
cls 
clear 
ls 
clear 
cls 
ls 
clear 
ls 
cd Desktop\Java\algorithms\ 
ls 
cd .. 
ls 
cd Desktop\Rust\server\ ls 
cd Desktop\Rust\server\  
ls 
cargo run 
cd Desktop\Rust\server\  
cargo run 
cd Desktop\Rust\server\  
cargo tun 
cargo run 
cd Desktop\Rust\server\  
cargo run 
cd Desktop\Rust\server\  
cargo run 
cd Desktop\Rust\server\ 
cargo run 
cd Desktop\Rust\server\ 
cargo run 
clear  
clear 
cd Desktop\Rust\server\ 
cargo run 
clear 
cd Desktop\Rust\server\ 
cargo run 
clear 
ls 
cd Desktop\Rust\server\ 
cargo run 
cd Desktop\Rust\server\ 
cargo run 
clear 
cd Desktop\Rust\server\ 
cargo run 
clear 
cd .. 
cd server\ 
ls 
cargo run
clear 
cargo run 
cd Desktop\Rust\server\ 
ls 
cargo run 
curl -X GET "https://catppuccin.com/palette/"  
curl -v POST -H "Content-Type: application/json" -d '{"hi": "ok"}' https://127.0.0.1:8443/ -k 
clear 
ls | where type == dir | each { |row|<\n>    { name: $row.name, len: (ls $row.name | length) }<\n>}
ls | where type == dir | par-each { |row|<\n>    { name: $row.name, len: (ls $row.name | length) }<\n>}
cd ~ 
ls 
clear 
cls 
ls 
ls | find 
ls | find txt 
ls | finx .bat 
ls | find .bat 
ls | find .bat | size 
ls | find .bat | bytes length 
ls | find .bat  
ls | find ".bat " 
ls | find ".bat" 
ls | sort 
$env.LS_COLORS 
$env  
$env.Path 
$env.config 
$env.config.ls  
clear 
$env.config 
$env.config.ls
ls 
ls | sort-by size 
ls | sort-by size --reverse 
ls | sort-by modified --reverse 
ls | sort-by modified  
clear 
cd Desktop\Rust\server
cargo run
explorer . 
ls | explore 
cd .. 
ls 
ls | explore
cd server 
bat 
help commands 
help commands | category filters 
help commands | where cateogry 
help commands | filter
help commands | where category == filters 
ls | flatten 
ls -r 
ls 
ls
ps | explore 
ps | sort-by pid 
ps | sort-by cpu 
ps | mem
ps | sort-by me 
ps | sort-by mem  
ps | find explorer 
ps | find explorer  | kill 
ps | find explorer   > 
ps | find explorer | for-each 
ps | find explorer 
kill 5500 
kill 102 8  
kill 1028  
clear 
chrome 
clear 
ls 
get-alias 
alias 
help command | where get
help command 
help comamnds | where get
help comamnds 
help commands 
help comamnds 
help comamnds
help commands 
notepad $nu.config 
notepad $nu.config-path
nvim $nu.config-path 
clear 
ls 
clear 
git add . 
git add w
git add . 
explorer 
open $nu.config
open $nu.config-path
claer 
clear 
cls 
cd Desktop\Rust\server\ 
cargo run 
open $nu.config-path 
clear 
cls 
cd ~ 
ls 
ls | find .log 
ls | find .log | name 
open java_error_in_pycharm_3964.log 
open java_error_in_pycharm_3964.log | find "Command Line " 
open java_error_in_pycharm_3964.log | find "Command Line" 
clear 
cls 
ls 
$env.config.color_config 
$env.config.color_config | text 
$env.config.color_config | find tct
$env.config.color_config | find txt 
$env.config.color_config | sort 
$env.config.color_config | where name 
$env.config.color_config 
ls 
$env.config.color_config 
$env.config.color_config.name 
$env.config.color_config
$env.config.color_config | sort 
notepad $nu.config-path 
ls 
ps 
ls 
cls 
ls 
cd Desktopx
cd Desktop
ls 
cd -->
cd Rust\
ls 
cd server 
ls 
$env.config.color_config | sort 
$env.config 
$nu.config-path 
$env.config 
ls 
$env.LS_COLORS 
$env.LS_COLORS = "di=48;2;200;0;0;5"
ls 
$env.LS_COLORS = "di=1;34:*.nu=3;33;46"
ls 
$nu.env-path 
ls 
cd Desktop\Rust\server 
ls 
notepad C:\Users\Aditya\.config\nushell\env.nu
ls 
$env.config.table.mode = "none" 
ls 
$env.config.table.mode = "dots" 
ls 
$env.config.table.mode = "restructured" 
ls 
$env.config.table.mode = "reinforced" 
ls 
$env.config.table.mode = "rounded" 
ls 
$env.config.table.mode = "compact" 
ls 
$env.config.table.mode = "light" 
ls 
$env.config.table.mode = "with_love" 
ls 
$env.config.table.mode = "thin" 
ls 
$env.config.table.mode = "basic" 
ls 
$env.config.table.mode = "rounded" 
ls 
$env.config.color_config 
eza 
ls
ls 
"hi" 
ls 
ls
lss 
ls 
ls
ls 
ls
ls 
help $nu.config.color_config 
help  
help commands 
$nu.config 
$env.config 
help cellpath 
help $env.config.color_config 
help 
help $env.config.color_config 
$env.config.color_config 
ls
ls 
ls
ls 
ls
ls 
true 
x > 1 ?  
1  > 2 
ls 
cd Desktop\Rust\server  
ls 
cd .. 
s 
ls 
cd .. 
ls 
$env.config 
ls
$env.config.color_config.shape_string = "white" 
ls
ls 
"sahiba" 
"h"asfuck 
ls 
$env.config.table 
$env.config.table.left = 0.5 
$env.config.table.left = 1 
$env.config.table.left = "1" 
$env.config.table.left  
$env.config.table.padding.left   
$env.config.table.padding.left   = 0.5 
$env.config.table.padding.left   = 2 
ls 
$env.config.table.padding.left   = 0
ls 
$env.config.table.padding.left   = 0
$env.config.table.padding.right   = 0
ls 
$env.config.table  
$env.config.table.mode = none   
$env.config.table.mode = "none"   
ls 
$env.config.table.padding.right   = 3
$env.config.table.padding.left   = 3
ls 
$env.config.table.padding.right   = 1 
$env.config.table.padding.left   = 1
ls 
$env.config.table.mode = "dots" 
ls 
$env.config.table.mode = "thin" 
ls 
$env.config.table.mode = "compact" 
ls 
$env.config.table.padding.right   = 3
$env.config.table.padding.left   = 3
ls 
ls | explore 
ls | grid --color
ls | grid --c 
ls | grid -c 
ls | grid -c -w 30
ls | grid -c -w 10
ls | grid -c -w 40 
ls 
ps 
ps | find idea64.exe   
ps | get 2244 
ps 
"C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe" 
"C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin"
let c = "C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin"
"C:/Users/Aditya/AppData/Local/Programs/IntelliJ IDEA Community Edition/bin"
"C:/Users/Aditya/AppData/Local/Programs/IntelliJ IDEA Community Edition/bin/idea64.exe"
run "C:/Users/Aditya/AppData/Local/Programs/IntelliJ IDEA Community Edition/bin/idea64.exe"
start "C:/Users/Aditya/AppData/Local/Programs/IntelliJ IDEA Community Edition/bin/idea64.exe"
start "C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe"
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe`
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe` -path . 
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe` --hel p 
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe` --help 
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe`
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe` . 
start `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe .` 
start  "" `C:\Users\Aditya\AppData\Local\Programs\IntelliJ IDEA Community Edition\bin\idea64.exe .` 
start `C:\Users\Aditya\AppData\Local\JetBrains\Toolbox\scripts\idea.cmd`
start `C:\Users\Aditya\AppData\Local\JetBrains\Toolbox\scripts\idea.cmd .`
`C:\Users\Aditya\AppData\Local\JetBrains\Toolbox\scripts\idea.cmd` . 
ij . 
ij l.
ij . 
jc . 
cd Desktop\Rust\server   
jc . 
jc Desktop\Rust\server\
cd Desktop\Rust\server    
code j 
code j , 
code j . 
code . 
ps 
celar 
cls 
cd Desktop\Rust\server 
code . 
code _ . 
code   . 
code c .  
code ;lasknf . 
code lafkjakdlfj . 
code j  . 
code r . 
cd Desktop\Rust\server  
ls 
code java . 
code andorid . 
code android . 
code rust . 
code python . 
code --help 
help code 
help code
cls 
cd ~/.config 
ls
git init 
cd .. 
cd .cofngi 
cd .config\ 
rm -r -f neofetch 
rm -r -f scoop 
ls 
rm -r -f bash 
ls | where size == 0 |  {|x| x } 
ls | where size == 0 |  x 
ls | where size == 0  
ls 
rm -r -f .android 
cd nushell 
ls 
cd .. 
sl 
ls 
ls
cd .config 
;s
ls 
cd powershell 
ls 
cd .. 
rm -r -f pwoershell 
rm -r -f powershell 
ls 
cd configstore
lss 
ls 
cd ..
sl 
ls 
rm -r -f configstore 
ls 
sl
help commands | find alias 
alias ls sl 
help aliases  
help aliases 
help alias 
alias sl = ls 
ls 
ls
sl 
ls 
sl | grid -c 
sl | grid -r
sl | grid
sl | grid -c 
sl | grid -c -i 
ls -c 
ls -i  
ls -threads 
ls --threads 
ls 
code java $nu.config-path
cls 
ls 
cd Desktop\Rust\server   
ls 
ls -r 
ls 
cls 
ls 
cls
ls 
clear 
sl 
cargo build 
cleR 
ls 
cls
ls 
cls 
ls 
cls 
ls 
cd Desktop\Rust\server    
ls 
cd .. 
cd ~/.config  
s 
ls 
git add . 
git add. 
git add  
git add . 
git commit -m "saving my configs for the future" 
gh 
ls
ls 
clear 
ls 
cls 
gh auth login
gh 
gh auth login 
git auth login 
gh auth login 
git --help 
gh --help 
git repo 
gh repo 
gh repo list  
git repo help 
gh repo help 
gh repo --help 
gh repo create --help
pwd 
gh repo create 
git repo lsit 
git repo list 
gh repo list 
gh repo --help 
git repo view 
gh  repo view 
gh 
cd ~/.config  
gh repo view 
git@github.com:adityavikramsinha/configs-and-bindings.git
git remote add origin https://github.com/adityavikramsinha/configs-and-bindings.git
git push origin master
ssh-keygen 
ssh-keygen -t ed25519 -C "adityavikramsinha19@gmail.com"
git push origin master
git remote add origin https://github.com/adityavikramsinha/configs-and-bindings.git
git push origin master
gh repo delete 
gh auth refresh -h github.com -s delete_repo
gh repo delete 
cd ~/.config   
pwd 
gh repo create 
git remote add origin https://github.com/adityavikramsinha/configs-and-bindings.git
git push origin master
git remove rm origin 
git  rm origin 
git remote rm origin
git push origin master
git repo 
gh repo --help 
gh repo list 
git remote add origin https://github.com/adityavikramsinha/configs-and-bindings.git
git push origin master
gh repo list 
git repo view 
gh repo view 
ls 
mk .gitignore
open .gitignore
ls 
git init 
ls
sl 
cd ~/.config    
ls 
--help 
help 
sys host | get hostnqme
sys host | get hostname
sys host 
git add . 
git commit -m  "pushed upstream" 
ls 
mk .gitignore 
touch 
touch --help 
touch .gitignore
ls
ls 
rm -r -f .idea 
